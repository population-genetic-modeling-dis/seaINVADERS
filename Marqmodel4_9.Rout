
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #### Recolonization model run script ####
> ## Jason Selwyn, Chris Bird
> ## Last Mod: 2019-18-02
> 
> rm(list=ls())
> library(parallel)
> library(abind)
> #library(Rmpi)
> library(snow)

Attaching package: ‘snow’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, clusterSplit, makeCluster, parApply,
    parCapply, parLapply, parRapply, parSapply, splitIndices,
    stopCluster

> library(ggplot2)
> #### Source Functions ####
> source("model_functions.R")
> source("Lutjanus_kasmira_ctrl_Marquesas_parameters.R")
> 
> 
> #### User Inputs for lionfish_number.R ####
> BS <- NUM_BOOTSTRAPS
> RUN.MONTH <- MONTHS*MODEL_DURATION     # Number of 12 months * number of years to run model
> initial.females <- seq(min_f_number,max_f_number,by=f_increment) # vector of number of starting female lionfish
> proportion.successful.recruits<-seq(min_prop,max_prop,length.out=prop_increment)
> 
> 
> #### Setup Data ####
> #region.sources<-list(Atlantic=atlantic.hap,Caribbean=carib.hap,GoMx=gomx.hap)
> #CEB HapModel
> if(exists("source.hap")){haplotype.sources<-list(source.name=source.hap)}
> 
> 
> 
> #all.thetas<-indonesia.theta+(2:-2)*indonesia.theta.sd
> #CEB
> all.thetas<-source.theta+(2:-2)*source.theta.sd
> #native.dist<-as.list(all.thetas)
> source.dist<-as.list(all.thetas)
> #names(native.dist)<-paste('Sim.native','theta',all.thetas,sep='.')
> #CEB
> names(source.dist)<-paste('Sim',source.name,'theta',all.thetas,sep='.')
> 
> 
> #sources<-c(native.dist,region.sources[-3])
> #CEB
> if(exists("source.hap")){
+ 	if(exists("source.theta")){
+ 		sources<-c(source.dist,haplotype.sources)
+ 	} else {
+ 		sources<-c(haplotype.sources)
+ 	}
+ } else {
+ 	if(exists("source.theta")){
+ 		sources<-c(source.dist)
+ 	} else {
+ 		stop("Space Invaders Haulted, no source data provided")
+ 	}
+ 
+ }
> 
> #destinations<-c(haplotype.sources)
> #CEB
> haplotype.destinations<-list(destination.name=destination.hap)
> 
> destinations<-c(haplotype.destinations)
> 
> for.workers<-ls()
> 
> 
> #### Build MPI Cluster ####
> cluster <- makeCluster(np,type="SOCK",outfile = "debug.txt")
> clusterExport(cl=cluster, as.list(for.workers),
+               envir=environment())
> clusterEvalQ(cluster, {library(abind)})
[[1]]
[1] "abind"     "snow"      "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[2]]
[1] "abind"     "snow"      "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[3]]
[1] "abind"     "snow"      "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[4]]
[1] "abind"     "snow"      "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[5]]
[1] "abind"     "snow"      "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[6]]
[1] "abind"     "snow"      "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[7]]
[1] "abind"     "snow"      "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[8]]
[1] "abind"     "snow"      "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[9]]
[1] "abind"     "snow"      "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[10]]
[1] "abind"     "snow"      "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[11]]
[1] "abind"     "snow"      "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[12]]
[1] "abind"     "snow"      "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[13]]
[1] "abind"     "snow"      "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[14]]
[1] "abind"     "snow"      "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[15]]
[1] "abind"     "snow"      "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[16]]
[1] "abind"     "snow"      "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[17]]
[1] "abind"     "snow"      "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[18]]
[1] "abind"     "snow"      "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[19]]
[1] "abind"     "snow"      "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

> 
> #### Run the model ####
> for(v in proportion.successful.recruits){
+   clusterExport(cl=cluster, list('v'),envir=environment())
+   for(S in 1:length(sources)){
+     clusterExport(cl=cluster, list('S'),envir=environment())
+     
+     s<-parallel::parSapply(cl=cluster, initial.females, function(x) replicate(BS, run.Model(FEMALE.START=x,hap.num.start.freq=sources[[S]],RUN.MONTH,Demo.param,RPR,F,variable.RPR=v), 
+                                                                               simplify = "array"), simplify = 'array')
+     
+ # 	s<-sapply(initial.females, function(x) replicate(BS, run.Model(FEMALE.START=x,hap.num.start.freq=sources[[S]],RUN.MONTH,Demo.param,RPR,F,variable.RPR=v), 
+ #                                                                               simplify = "array"), simplify = 'array')
+ 	
+     print('Finished Cluster Simulations')
+     print(paste("s",format(object.size(s),units="Mb"),sep=' = '))
+     
+     s<-s[,!apply(s,2,remove.0.haps),,]
+     print('Summary part 1 finished')
+     print(paste("s",format(object.size(s),units="Mb"),sep=' = '))
+     
+     s<-aperm(s, c(1,2,4,3))
+     print('Summary part 2 finished')
+     print(paste("s",format(object.size(s),units="Mb"),sep=' = '))
+     
+     names(dim(s))<-c('Months','Haplotypes','Initial Females','Bootstrap')
+     print('Summary part 3 finished')
+     print(paste("s",format(object.size(s),units="Mb"),sep=' = '))
+     
+     f<-array(apply(s,c(3,4),freq.summary),dim=dim(s))
+     print('Summary finished')
+     print(paste("f",format(object.size(f),units="Mb"),sep=' = '))
+     
+     save.image(paste('./',names(sources)[S],'-rpr-',v,'_source.RData',sep=''))
+     print('Model Image Saved')
+     #### Make Model Overview Plots ####
+     #Problems with this resulting in this error: 
+     #/home/apps/R/gcc/3.3.2/lib64/R/bin/BATCH: line 60: 94950 Killed                  ${R_HOME}/bin/R -f ${in} ${opts} ${R_BATCH_OPTIONS} > ${out} 2>&1
+     
+     # pdf(paste('./',names(sources)[S],'-plots.pdf',sep=''),width=100,height=100,onefile = T)
+     # 
+     # total.plot<-plotting.model(s,initial.females,type='total',mem.redux=T)
+     # print(total.plot)
+     # frequency.plot<-plotting.model(f,initial.females,type='freq',mem.redux=T)
+     # print(frequency.plot)
+     # 
+     # dev.off()
+     # 
+     # rm(s)
+     # rm(total.plot)
+     # rm(frequency.plot)
+     # gc()
+     # 
+     # print('Finished simulation plots')
+     
+     #### Statistical Analysis ####
+     
+     pdf(paste('./',names(sources)[S],'-rpr-',v,'-statistical_plots.pdf',sep=''),onefile = T)
+     
+     for(D in 1:length(destinations)){
+       stats.output<-model.statistics(destination.haplotypes=destinations[[D]],model.freq=f)
+       
+       statistical.plots<-plotting.statistics(stats.output,start.females=initial.females,title=paste(names(sources)[S],'to',names(destinations)[D]))
+       
+       print(statistical.plots[[1]])
+       print(statistical.plots[[2]])
+       print(statistical.plots[[3]])
+       print(statistical.plots[[4]])
+       print(statistical.plots[[5]])
+       
+       write.csv(statistical.plots[[6]],paste('./',names(sources)[S],'-to-',names(destinations)[D],'-rpr-',v,'-plot.data.csv',sep=''))
+     }
+     
+     dev.off()
+     print('Finished statistical plots')
+     rm(s)
+     rm(f)
+     rm(statistical.plots)
+     gc()
+     
+     print(paste('Finished',names(sources)[S]))
+   }
+ }
[1] "Finished Cluster Simulations"
[1] "s = 9.2 Mb"
[1] "Summary part 1 finished"
[1] "s = 7.8 Mb"
[1] "Summary part 2 finished"
[1] "s = 7.8 Mb"
[1] "Summary part 3 finished"
[1] "s = 7.8 Mb"
[1] "Summary finished"
[1] "f = 7.8 Mb"
[1] "Model Image Saved"
[1] "Finished statistical plots"
[1] "Finished Sim.Marq.theta.19.75064"
[1] "Finished Cluster Simulations"
[1] "s = 9.2 Mb"
[1] "Summary part 1 finished"
[1] "s = 6.6 Mb"
[1] "Summary part 2 finished"
[1] "s = 6.6 Mb"
[1] "Summary part 3 finished"
[1] "s = 6.6 Mb"
[1] "Summary finished"
[1] "f = 6.6 Mb"
[1] "Model Image Saved"
[1] "Finished statistical plots"
[1] "Finished Sim.Marq.theta.14.73042"
[1] "Finished Cluster Simulations"
[1] "s = 9.2 Mb"
[1] "Summary part 1 finished"
[1] "s = 4.8 Mb"
[1] "Summary part 2 finished"
[1] "s = 4.8 Mb"
[1] "Summary part 3 finished"
[1] "s = 4.8 Mb"
[1] "Summary finished"
[1] "f = 4.8 Mb"
[1] "Model Image Saved"
[1] "Finished statistical plots"
[1] "Finished Sim.Marq.theta.9.7102"
[1] "Finished Cluster Simulations"
[1] "s = 9.2 Mb"
[1] "Summary part 1 finished"
[1] "s = 2.9 Mb"
[1] "Summary part 2 finished"
[1] "s = 2.9 Mb"
[1] "Summary part 3 finished"
[1] "s = 2.9 Mb"
[1] "Summary finished"
[1] "f = 2.9 Mb"
[1] "Model Image Saved"
[1] "Finished statistical plots"
[1] "Finished Sim.Marq.theta.4.68998"
[1] "Finished Cluster Simulations"
[1] "s = 9.2 Mb"
[1] "Summary part 1 finished"
[1] "s = 0.1 Mb"
Error in aperm.default(s, c(1, 2, 4, 3)) : 
  'perm' is of wrong length 4 (!= 3)
Calls: aperm -> aperm.default
Execution halted
